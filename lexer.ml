# 11 "lexer.mll"
  (* header *)
  
open Lexing
open Parser

(* association list of keywords *)
let keyword_al = [
  ("dllsegpe",DLLSEGPE);
  ("dllsegne",DLLSEGNE);
  ("end",END);
  ("exists",EXISTS);
  ("lam",LAM);
  ("lsegpe",LSEGPE);
  ("lsegne",LSEGNE);
  ("PROP",PROP);
]

(* To store the position of the beginning of a string and comment *)
let string_start_loc = ref Location.none;;
let comment_start_loc = ref [];;
let in_comment () = !comment_start_loc <> [];;

(* Update the current location with file name and line number. *)
let update_loc lexbuf line absolute chars =
  let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with
	  pos_lnum = if absolute then line else pos.pos_lnum + line;
	  pos_bol = pos.pos_cnum - chars; }

(* Initialize file name and starting position *)
let init lexbuf file =
  Location.lexbuf := Some lexbuf;
  update_loc lexbuf 1 true 0;
  lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with pos_fname = file; };
  lexbuf.lex_start_p <- lexbuf.lex_curr_p


# 41 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\222\255\223\255\061\000\160\000\235\000\136\000\228\255\
    \229\255\230\255\231\255\001\000\002\000\236\255\001\000\241\255\
    \242\255\243\255\244\255\246\255\247\255\248\255\249\255\250\255\
    \173\000\110\000\002\000\005\000\255\255\252\255\184\000\006\000\
    \253\255\237\255\030\000\251\255\239\255\233\255\232\255\054\001\
    \137\001\103\001\007\000\013\000\052\000\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\033\000\029\000\029\000\028\000\255\255\
    \255\255\255\255\255\255\021\000\020\000\255\255\015\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \017\000\033\000\001\000\000\000\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\000\
    \031\000\255\255\003\000\004\000\004\000\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\030\000\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \255\255\035\000\255\255\255\255\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\028\000\026\000\026\000\027\000\026\000\028\000\
    \032\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\011\000\026\000\000\000\022\000\000\000\014\000\036\000\
    \019\000\016\000\008\000\010\000\023\000\009\000\007\000\025\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\013\000\015\000\045\000\012\000\038\000\037\000\
    \003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\020\000\035\000\017\000\028\000\005\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\021\000\024\000\018\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \029\000\000\000\000\000\000\000\040\000\030\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\032\000\000\000\000\000\031\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\034\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \002\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\033\000\000\000\000\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\
    \000\000\000\000\039\000\000\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \000\000\029\000\000\000\000\000\042\000\000\000\000\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\043\000\000\000\000\000\000\000\039\000\044\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
    \040\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\026\000\000\000\000\000\026\000\027\000\
    \031\000\042\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\026\000\255\255\000\000\255\255\000\000\014\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\043\000\000\000\011\000\012\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\034\000\000\000\044\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \025\000\255\255\255\255\255\255\003\000\025\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\030\000\255\255\255\255\030\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\024\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\255\255\255\255\255\255\
    \255\255\024\000\255\255\255\255\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\255\255\255\255\
    \255\255\255\255\005\000\255\255\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \255\255\041\000\255\255\255\255\041\000\255\255\255\255\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\041\000\255\255\255\255\255\255\039\000\041\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \030\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\255\255\255\255\255\255\255\255\
    \040\000\255\255\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 64 "lexer.mll"
            ( update_loc lexbuf 1 false 0;
              token lexbuf )
# 252 "lexer.ml"

  | 1 ->
# 66 "lexer.mll"
           ( token lexbuf )
# 257 "lexer.ml"

  | 2 ->
# 68 "lexer.mll"
  ( update_loc lexbuf 1 false 0;
           token lexbuf )
# 263 "lexer.ml"

  | 3 ->
# 70 "lexer.mll"
         ( comment_start_loc := [lexbuf.lex_curr_p];
           comment lexbuf;
           token lexbuf )
# 270 "lexer.ml"

  | 4 ->
# 73 "lexer.mll"
          ( POINTSTO )
# 275 "lexer.ml"

  | 5 ->
# 74 "lexer.mll"
         ( COMMA )
# 280 "lexer.ml"

  | 6 ->
# 75 "lexer.mll"
         ( DOLLAR )
# 285 "lexer.ml"

  | 7 ->
# 76 "lexer.mll"
         ( LBRACE )
# 290 "lexer.ml"

  | 8 ->
# 77 "lexer.mll"
         ( LBRACKET )
# 295 "lexer.ml"

  | 9 ->
# 78 "lexer.mll"
         ( LPAREN )
# 300 "lexer.ml"

  | 10 ->
# 79 "lexer.mll"
          ( POINTSTO )
# 305 "lexer.ml"

  | 11 ->
# 80 "lexer.mll"
         ( RBRACE )
# 310 "lexer.ml"

  | 12 ->
# 81 "lexer.mll"
         ( RBRACKET )
# 315 "lexer.ml"

  | 13 ->
# 82 "lexer.mll"
         ( RPAREN )
# 320 "lexer.ml"

  | 14 ->
# 83 "lexer.mll"
         ( SEMI )
# 325 "lexer.ml"

  | 15 ->
# 84 "lexer.mll"
        ( AMPER )
# 330 "lexer.ml"

  | 16 ->
# 85 "lexer.mll"
         ( AMPERAMPER )
# 335 "lexer.ml"

  | 17 ->
# 86 "lexer.mll"
        ( BAR )
# 340 "lexer.ml"

  | 18 ->
# 87 "lexer.mll"
         ( BARBAR )
# 345 "lexer.ml"

  | 19 ->
# 88 "lexer.mll"
         ( COLON )
# 350 "lexer.ml"

  | 20 ->
# 89 "lexer.mll"
         ( EQUAL )
# 355 "lexer.ml"

  | 21 ->
# 90 "lexer.mll"
                            ( UNARYOP(Lexing.lexeme lexbuf) )
# 360 "lexer.ml"

  | 22 ->
# 91 "lexer.mll"
         ( EQUALEQUAL)
# 365 "lexer.ml"

  | 23 ->
# 92 "lexer.mll"
         ( BANGEQUAL)
# 370 "lexer.ml"

  | 24 ->
# 93 "lexer.mll"
        ( PLUS )
# 375 "lexer.ml"

  | 25 ->
# 94 "lexer.mll"
        ( MINUS )
# 380 "lexer.ml"

  | 26 ->
# 95 "lexer.mll"
            ( STAR )
# 385 "lexer.ml"

  | 27 ->
# 96 "lexer.mll"
            ( DOT )
# 390 "lexer.ml"

  | 28 ->
# 97 "lexer.mll"
        ( NAT(int_of_string(Lexing.lexeme lexbuf)) )
# 395 "lexer.ml"

  | 29 ->
# 98 "lexer.mll"
          ( let s = Lexing.lexeme lexbuf in
              try List.assoc s keyword_al
              with Not_found -> IDENT(s) )
# 402 "lexer.ml"

  | 30 ->
# 101 "lexer.mll"
           ( QIDENT(Lexing.lexeme lexbuf) )
# 407 "lexer.ml"

  | 31 ->
# 102 "lexer.mll"
           ( FIDENT(Lexing.lexeme lexbuf) )
# 412 "lexer.ml"

  | 32 ->
# 103 "lexer.mll"
        ( EOF )
# 417 "lexer.ml"

  | 33 ->
# 104 "lexer.mll"
      ( raise(Location.Parse_error 
		("Illegal character (" ^ Char.escaped (Lexing.lexeme_char lexbuf 0) ^ ").",
		 Location.mkloc(lexbuf.lex_start_p) (lexbuf.lex_curr_p))) )
# 424 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 41
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 109 "lexer.mll"
         ( comment_start_loc := lexbuf.lex_curr_p :: !comment_start_loc;
           comment lexbuf; )
# 436 "lexer.ml"

  | 1 ->
# 111 "lexer.mll"
         ( match !comment_start_loc with
             | [] -> assert false
             | [x] -> comment_start_loc := [];
             | _ :: l -> comment_start_loc := l;
                 comment lexbuf; )
# 445 "lexer.ml"

  | 2 ->
# 116 "lexer.mll"
        ( match !comment_start_loc with
            | [] -> assert false
            | loc :: _ -> comment_start_loc := [];
		raise(Location.Parse_error
			("Unterminated comment.",
			 Location.mkloc loc (lexbuf.lex_curr_p))) )
# 455 "lexer.ml"

  | 3 ->
# 122 "lexer.mll"
            ( update_loc lexbuf 1 false 0;
              comment lexbuf )
# 461 "lexer.ml"

  | 4 ->
# 124 "lexer.mll"
      ( comment lexbuf )
# 466 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

# 126 "lexer.mll"
  (* trailer *)

# 475 "lexer.ml"
